package com.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.websocket.server.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.model.ClassifyRelation;
import com.model.Product;
import com.model.ProductClassify;
import com.model.ProductClassifySub;
import com.model.ShopNotic;
import com.service.impl.ClassifyReLationServiceImpl;
import com.service.impl.ProductClassifyServiceImpl;
import com.service.impl.ProductClassifySubServiceImpl;
import com.service.impl.ProductServiceImpl;
import com.service.impl.ShopNoticServiceImpl;

@Controller
@RequestMapping("/home")
public class HomeController {

	
	@Autowired
	private ClassifyReLationServiceImpl crelImpl;
	@Autowired
	private ProductClassifyServiceImpl proClaImpl;
	@Autowired
	private ProductClassifySubServiceImpl proClaSubImpl;
	@Autowired
	private ShopNoticServiceImpl shopNoticServiceImpl;
	@Autowired
	private ProductServiceImpl productServiceImpl;
	
	
	/**
	 * 跳转到不同的界面
	 */
	@RequestMapping("jthome/{path}")
	public String jtPro(@PathVariable("path") String path) {
		return "/index/" + path;
	}

	/**
	 * 进入商品详情页时存入浏览cookie
	 * 
	 * @throws IOException
	 */
	@RequestMapping("/godetail")
	public String saveCookieAndGoDetail(@PathParam("id") String id,HttpServletRequest request,
			HttpServletResponse response,HttpSession session) throws IOException {
		String historyId = "";
		// 获取Cookie数据并遍历，看是否已经存在historyId这个Cookie
		Cookie[] cookies = request.getCookies();
		if (cookies != null && cookies.length > 0) {
			for (Cookie cookie : cookies) {
				String name = cookie.getName();
				String value = cookie.getValue();
				if (name.equals("historyId")) {
					// 存在historyId这个cookie的话，就将它赋值给historyId这个变量
					historyId = value;
					session.setAttribute("foot", historyId);
					System.out.println("足迹:"+historyId);
				}
			}
		}
		// 当遍历=之后发现没有这个Cookie是，就创建historyId这个Cookie，并将商品id保存到其中
		if (historyId == null || historyId.equals("")) {
			id += ",";
			System.out.println(id);
			Cookie producthistoryCookie = new Cookie("historyId", id);
			//设置cookie有效期10天
			producthistoryCookie.setMaxAge(60*60*24*10);
			response.addCookie(producthistoryCookie);
		} else {
			// 存在historyId这个Cookie时，就将最近浏览的id添加到字符串的最前面
			historyId = "," + historyId;
			historyId = historyId.replace("," + id + ",", ",");
			String rs = id + historyId;

			Cookie producthistoryCookie = new Cookie("historyId", rs);
			response.addCookie(producthistoryCookie);
		}
		return "/index/product-detail";
	}
	
	
	@RequestMapping("toHome")
	public String toHome(ClassifyRelation classifyRelation,ModelMap modelMap){
		List<ClassifyRelation> listClassifyRelaition=crelImpl.selectAll(classifyRelation);
		
		for (ClassifyRelation cla : listClassifyRelaition) {
			
			 ProductClassify p=proClaImpl.selectById(cla.getProductClassify());
			 cla.setProductClassify(p);
			 if(cla.getProductClassify1()!=null){
				 ProductClassify p1=proClaImpl.selectById(cla.getProductClassify1());
			 cla.setProductClassify1(p1);
			 }
		}
		
		List<ShopNotic> listShopNotic=shopNoticServiceImpl.selectAll();
		List<ProductClassify> listProCla=new ArrayList<>();
			listProCla.add(getProCla(9));
			listProCla.add(getProCla(10));
			listProCla.add(getProCla(11));
			listProCla.add(getProCla(12));
			listProCla.add(getProCla(13));
		modelMap.addAttribute("listProCla", listProCla);
		modelMap.addAttribute("listClaRel", listClassifyRelaition);
		modelMap.addAttribute("pro1", productServiceImpl.selectByPrimaryKey(7));
		modelMap.addAttribute("pro2", productServiceImpl.selectByPrimaryKey(8));
		modelMap.addAttribute("pro3", productServiceImpl.selectByPrimaryKey(9));
		modelMap.addAttribute("listShopNotic", listShopNotic);
		return "/index/home";
	}
	
	public ProductClassify getProCla( int id){
		ProductClassify pc=new ProductClassify();
		pc.setId(id);
		 ProductClassify p=proClaImpl.selectById(pc);
		List<ProductClassifySub> listProClaSub=new ArrayList<>();
		
		for (ProductClassifySub pcs : p.getListProClassifySub()) {
			ProductClassifySub p1=proClaSubImpl.selectById(pcs);
			listProClaSub.add(p1);
		}
		p.setListProClassifySub(listProClaSub);
		System.out.println("=========="+p);
		return p;
	}
    
	@RequestMapping("toProductList")
	
	public String toProductList(Product product,ModelMap modelMap){
		
		if(product.getProductName()!=null){
			
		}else{
			
		}
		return "index/product-list";
	}
	
}
